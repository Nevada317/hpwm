PRG=main
MCU=atmega8
F_CPU=11059200
PROGRAMMER=apu2
TARGET=m8

CFLAGS=-Wall -g -O1 -mmcu=$(MCU) -DF_CPU=$(F_CPU)

LIBS=

# Optimize-out unused functions
CFLAGS+=-fdata-sections -ffunction-sections
LDFLAGS+=-Wl,--gc-sections

CC=avr-gcc
OBJCOPY=avr-objcopy
OBJDUMP=avr-objdump
AVRDUDE=sudo avrdude1 -c $(PROGRAMMER) -p $(TARGET)
# note: avrdude1 is just shell-file link with taskset,
# that uses only one CPU core to prevent race condition:
#  $ cat /bin/avrdude1
#  #!/bin/bash
#  taskset -c 1 avrdude $@


SRCS := $(wildcard src/*.c)
HS   := $(wildcard src/*.h)
OBJS := $(patsubst src/%.c,build/%.o,$(SRCS))
STYLE1="\\x1b[33\;1m   - "
STYLE2="\\x1b[0m"

all: lst text

text: hex bin srec

.PHONY: hex
hex:  build/$(PRG).hex build/$(PRG)_eeprom.hex
.PHONY: bin
bin:  build/$(PRG).bin build/$(PRG)_eeprom.bin
.PHONY: srec
srec: build/$(PRG).srec build/$(PRG)_eeprom.srec

lst:  build/$(PRG).lst


# Compiling
build/%.o: src/%.c $(HS) Makefile | build/.
	@echo -e "${STYLE1}Compiling $< into object file${STYLE2}"
	@$(CC) -c $(CFLAGS) -o $@ $< $(LIBS)

# Linking
build/$(PRG).elf: $(OBJS) | build/.
	@echo -e "${STYLE1}Linking${STYLE2}"
	@$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)
	@avr-size --format=avr --mcu=$(MCU) $@

# Conversion
build/%.hex: build/%.elf | build/.
	@echo -e "${STYLE1}Generating HEX image of FLASH${STYLE2}"
	@$(OBJCOPY) -j .text -j .data -O ihex $< $@

build/%.bin: build/%.elf | build/.
	@echo -e "${STYLE1}Generating BIN image of FLASH${STYLE2}"
	@$(OBJCOPY) -j .text -j .data -O binary $< $@

build/%.srec: build/%.elf | build/.
	@echo -e "${STYLE1}Generating SREC image of FLASH${STYLE2}"
	@$(OBJCOPY) -j .text -j .data -O srec $< $@

build/%_eeprom.hex: build/%.elf | build/.
	@echo -e "${STYLE1}Generating HEX image of EEPROM...${STYLE2}"
	@$(OBJCOPY) -j .eeprom --change-section-lma .eeprom=0 -O ihex --no-change-warnings $< $@

build/%_eeprom.bin: build/%.elf | build/.
	@echo -e "${STYLE1}Generating BIN image of EEPROM...${STYLE2}"
	@$(OBJCOPY) -j .eeprom --change-section-lma .eeprom=0 -O binary --no-change-warnings $< $@

build/%_eeprom.srec: build/%.elf | build/.
	@echo -e "${STYLE1}Generating SREC image of EEPROM...${STYLE2}"
	@$(OBJCOPY) -j .eeprom --change-section-lma .eeprom=0 -O srec --no-change-warnings $< $@

# Listing generation
build/%.lst: build/%.elf | build/.
	@echo -e "${STYLE1}Generating listing for $<${STYLE2}"
	@$(OBJDUMP) -h -S $< > $@

build/.:
	@echo -e "${STYLE1}Creating build directory...${STYLE2}"
	@mkdir build/
clean:
	@echo -e "${STYLE1}Removing all autogenerated files${STYLE2}"
	@rm -rf build/
	@rm -rf *.o $(PRG).elf $(PRG).lst *.map *.hex *.bin *.srec $(EXTRA_CLEAN_FILES)

.PHONY: write
write: flash

.PHONY: wake
wake:
	-$(AVRDUDE)
	-sudo avrdude1 -B 1200 -c apu2 -p m2560

.PHONY: flash
flash: build/$(PRG).hex
	$(AVRDUDE) -U flash:w:$<:i

.PHONY: eep
eep: build/$(PRG)_eeprom.hex
	$(AVRDUDE) -U eeprom:w:$<:i -D

.PHONY: verify
verify: build/$(PRG).hex
	$(AVRDUDE) -B 1200 -U flash:v:$<.hex:i

.PHONY: fuse
fuse:
	$(AVRDUDE) -B 1200 -e -U lfuse:w:0x3f:m -U hfuse:w:0xd1:m

.PHONY: lock
lock:
	$(AVRDUDE) -V -U lock:w:0xe8:m

read:
	$(AVRDUDE) -U eeprom:r:eep.bin:r -D
	hexdump eep.bin
